{"version":3,"sources":["components/Loader/PageNavLink.tsx","components/Loader/Navbar.tsx","App.tsx","components/Loader/Loader.tsx","api.ts","components/Loader/PersonLink.tsx","components/Loader/PeopleTable.tsx","pages/PeoplePage.tsx","index.tsx"],"names":["PageNavLink","to","text","className","isActive","classNames","Navbar","role","App","Loader","getPeople","delay","Promise","resolve","setTimeout","then","fetch","response","json","PersonLink","value","person","name","sex","born","died","fatherName","motherName","slug","mother","father","selectedPerson","PeopleTable","people","useParams","personWithParents","find","parent","map","PeoplePage","useState","setPeople","isLoading","setIsLoading","isError","setIsError","handleLoading","peopleFromServer","useEffect","length","createRoot","document","getElementById","render","path","element","index","replace"],"mappings":"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","file":"static/js/main.8defccab.chunk.js","sourcesContent":["import classNames from 'classnames';\nimport { FC } from 'react';\nimport { NavLink } from 'react-router-dom';\n\ntype Props = {\n  to: string;\n  text: string;\n};\n\nexport const PageNavLink: FC<Props> = ({ to, text }) => (\n  <NavLink\n    className={({ isActive }) => classNames(\n      'navbar-item',\n      { 'has-background-grey-lighter': isActive },\n    )}\n    to={to}\n  >\n    {text}\n  </NavLink>\n);\n","import { FC } from 'react';\nimport { PageNavLink } from './PageNavLink';\n\nexport const Navbar: FC = () => (\n  <nav\n    data-cy=\"nav\"\n    className=\"navbar is-fixed-top has-shadow\"\n    role=\"navigation\"\n    aria-label=\"main navigation\"\n  >\n    <div className=\"container\">\n      <div className=\"navbar-brand\">\n        <PageNavLink to=\"/\" text=\"Home\" />\n        <PageNavLink to=\"/people\" text=\"People\" />\n      </div>\n    </div>\n  </nav>\n);\n","import { Outlet } from 'react-router-dom';\nimport './App.scss';\nimport { Navbar } from './components/Loader/Navbar';\n\nexport const App = () => (\n  <div data-cy=\"app\">\n    <Navbar />\n\n    <main className=\"section\">\n      <Outlet />\n    </main>\n  </div>\n);\n","import './Loader.scss';\n\nexport const Loader = () => (\n  <div className=\"Loader\" data-cy=\"loader\">\n    <div className=\"Loader__content\" />\n  </div>\n);\n","import { Person } from './types/Person';\n\n// eslint-disable-next-line max-len\nconst API_URL = 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nfunction wait(delay: number) {\n  return new Promise(resolve => setTimeout(resolve, delay));\n}\n\nexport function getPeople(): Promise<Person[]> {\n  // keep this delay for testing purpose\n  return wait(500)\n    .then(() => fetch(API_URL))\n    .then(response => response.json());\n}\n","import classNames from 'classnames';\nimport { FC } from 'react';\nimport { Link } from 'react-router-dom';\nimport { Person } from '../../types';\n\ntype Props = {\n  person: Person;\n  selectedPerson: string;\n};\n\nexport const PersonLink: FC<Props> = ({\n  person: {\n    name,\n    sex,\n    born,\n    died,\n    fatherName,\n    motherName,\n    slug,\n    mother,\n    father,\n  },\n  selectedPerson,\n}) => {\n  const isSelected = (value: string) => value === selectedPerson;\n\n  return (\n    <tr\n      data-cy=\"person\"\n      className={classNames({ 'has-background-warning': isSelected(slug) })}\n    >\n      <td>\n        <Link\n          to={`../${slug}`}\n          className={classNames({ 'has-text-danger': sex === 'f' })}\n        >\n          {name}\n        </Link>\n      </td>\n      <td>{sex}</td>\n      <td>{born}</td>\n      <td>{died}</td>\n      <td>\n        {mother ? (\n          <Link to={`../${mother.slug}` || ''} className=\"has-text-danger\">\n            {motherName}\n          </Link>\n        ) : (\n          <>\n            {motherName || '-'}\n          </>\n        )}\n      </td>\n      <td>\n        {father ? (\n          <Link to={`../${father.slug}`}>\n            {fatherName}\n          </Link>\n        ) : (\n          <>\n            {fatherName || '-'}\n          </>\n        )}\n      </td>\n    </tr>\n  );\n};\n","import { FC } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Person } from '../../types';\nimport { PersonLink } from './PersonLink';\n\ntype Props = {\n  people: Person[];\n};\n\nexport const PeopleTable: FC<Props> = ({ people }) => {\n  const { slug = '' } = useParams();\n\n  const personWithParents = (person: Person) => {\n    const mother\n      = people.find(parent => parent.name === person.motherName);\n\n    const father\n      = people.find(parent => parent.name === person.fatherName);\n\n    return ({ ...person, mother, father });\n  };\n\n  return (\n    <table\n      data-cy=\"peopleTable\"\n      className=\"table is-striped is-hoverable is-narrow is-fullwidth\"\n    >\n      <thead>\n        <tr>\n          <th>Name</th>\n          <th>Sex</th>\n          <th>Born</th>\n          <th>Died</th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n\n      <tbody>\n        {people.map(person => (\n          <PersonLink\n            person={personWithParents(person)}\n            key={person.slug}\n            selectedPerson={slug}\n          />\n        ))}\n      </tbody>\n    </table>\n  );\n};\n","import { FC, useEffect, useState } from 'react';\nimport { Loader } from '../components/Loader';\nimport { getPeople } from '../api';\nimport { Person } from '../types';\nimport { PeopleTable } from '../components/Loader/PeopleTable';\n\nexport const PeoplePage: FC = () => {\n  const [people, setPeople] = useState<Person[]>([]);\n  const [isLoading, setIsLoading] = useState(false);\n  const [isError, setIsError] = useState(false);\n\n  const handleLoading = async () => {\n    try {\n      setIsError(false);\n      setIsLoading(true);\n\n      const peopleFromServer = await getPeople();\n\n      setIsLoading(false);\n      setPeople(peopleFromServer);\n    } catch (error) {\n      setIsError(true);\n      setIsLoading(false);\n    }\n  };\n\n  useEffect(() => {\n    handleLoading();\n  }, []);\n\n  return (\n    <div className=\"container\">\n      <h1 className=\"title\">People Page</h1>\n\n      <div className=\"block\">\n        <div className=\"box table-container\">\n          {isLoading && <Loader />}\n\n          {isError && (\n            <p data-cy=\"peopleLoadingError\" className=\"has-text-danger\">\n              Something went wrong\n            </p>\n          )}\n\n          {!isLoading && !isError && (\n            !people.length ? (\n              <p data-cy=\"noPeopleMessage\">\n                There are no people on the server\n              </p>\n            ) : (\n              <PeopleTable people={people} />\n            )\n          )}\n        </div>\n      </div>\n    </div>\n  );\n};\n","import { createRoot } from 'react-dom/client';\nimport {\n  HashRouter as Router,\n  Navigate,\n  Route,\n  Routes,\n} from 'react-router-dom';\n\nimport 'bulma/css/bulma.css';\nimport '@fortawesome/fontawesome-free/css/all.css';\n\nimport { App } from './App';\nimport { PeoplePage } from './pages/PeoplePage';\n\ncreateRoot(document.getElementById('root') as HTMLDivElement)\n  .render(\n    <Router>\n      <Routes>\n        <Route path=\"/\" element={<App />}>\n          <Route path=\"people\">\n            <Route index element={<PeoplePage />} />\n            <Route path=\":slug\" element={<PeoplePage />} />\n          </Route>\n\n          <Route index element={<h1 className=\"title\">Home Page</h1>} />\n          <Route path=\"home\" element={<Navigate to=\"/\" replace />} />\n          <Route path=\"*\" element={<h1 className=\"title\">Page not found</h1>} />\n        </Route>\n      </Routes>\n    </Router>,\n  );\n"],"sourceRoot":""}